#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;


<% for (let i=0; i<IC.length; i++) { %>
const slice IC<%=i%> = "<%=IC[i]%>"s;<% } %>

const slice vk_gamma_2 = "<%= vk_gamma_2    %>"s;
const slice vk_delta_2 = "<%= vk_delta_2    %>"s;
const slice vk_alpha_1 = "<%= vk_alpha_1    %>"s;
const slice vk_beta_2 = "<%= vk_beta_2    %>"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    <% for (let i = 1; i <= nPublic; i++) { %>
    slice x<%=i%>, int y<%=i%>,
    <% } %>
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    <% for (let i = 1; i <= nPublic; i++) { %>
    int pubInput<%=i-1%> <%= i == nPublic ? "" : "," %>
    <% } %>
) impure {

    slice cpub = bls_g1_multiexp(
        <% for (let i = 1; i <= nPublic; i++) { %>
        IC<%=i%>, pubInput<%=i-1%>,
        <% } %>
        <%= nPublic %>
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {

        slice pi_a = in_msg_body~load_p1();
        slice pi_b = in_msg_body~load_p2();
        slice pi_c = in_msg_body~load_p1();


        <% for (let i = 1; i <= nPublic; i++) { %>
        int pubInput<%=i-1%> = in_msg_body~load_newint();
        <% } %>

        groth16Verify(
            pi_a,
            pi_b,
            pi_c,
            <% for (let i = 1; i <= nPublic; i++) { %>
            pubInput<%=i-1%> <%= i == nPublic ? "" : "," %>
            <% } %>
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}