#include "imports/stdlib.fc";

;; ops
const op::verify = "op::verify"c;

;; sizes
const int verifier::P1_SIZE = 48 * 8;
const int verifier::P2_SIZE = 96 * 8;

;; input constants (IC0 is the base term)
<% for (let i = 0; i < IC.length; i++) { -%>
const slice verifier::IC<%= i %> = "<%= IC[i] %>"s;
<% } -%>

;; vk constants
const slice verifier::vk_gamma_2 = "<%= vk_gamma_2 %>"s;
const slice verifier::vk_delta_2 = "<%= vk_delta_2 %>"s;
const slice verifier::vk_alpha_1 = "<%= vk_alpha_1 %>"s;
const slice verifier::vk_beta_2  = "<%= vk_beta_2 %>"s;

;; public input dict settings
const int verifier::publicInputKeyLen = <%= publicInputKeyLen %>;
const int verifier::nPublic = <%= nPublic %>;

;; error codes
const int verifier::err::public_not_present = 257;
const int verifier::err::too_many_publics = 258;

;; bls intrinsics
slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

<%
const maxBatch = 7;
let sizes = [];
if (nPublic <= 0) {
  sizes = [];
} else if (nPublic <= maxBatch) {
  sizes = [nPublic];
} else {
  const full = Math.floor(nPublic / maxBatch);
  for (let i = 0; i < full; i++) sizes.push(maxBatch);
  const rem = nPublic % maxBatch;
  if (rem > 0) sizes.push(rem);
}

const uniqSizes = [...new Set(sizes)];
-%>

<% uniqSizes.forEach((k) => { -%>
slice bls_g1_multiexp_<%= k %>(
<% for (let i = 1; i <= k; i++) { -%>
    slice x<%= i %>, int y<%= i %><%= i<k ? "," : "" %>
<% } -%>
    , int n
) asm "BLS_G1_MULTIEXP";
<% }); -%>

(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, verifier::P1_SIZE);
    s~skip_bits(verifier::P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, verifier::P2_SIZE);
    s~skip_bits(verifier::P2_SIZE);
    return (s, p2);
}

(int) groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    cell pubInputs
) impure {
    int res = 0;

<% if (nPublic === 0) { -%>
    ;; no public inputs: cpub = IC0
    slice cpub = verifier::IC0;
<% } else { -%>

    ;; extract public inputs by keys 0..nPublic-1
<% for (let i = 0; i < nPublic; i++) { -%>
    (slice input<%= i %>, int ok<%= i %>) = pubInputs~udict_delete_get?(verifier::publicInputKeyLen, <%= i %>);
    throw_unless(verifier::err::public_not_present, ok<%= i %>);
    int val<%= i %> = input<%= i %>~load_uint(256);
<% } -%>

    ;; ensure the dict is now empty
    throw_unless(verifier::err::too_many_publics, null?(pubInputs));

    ;; assemble cpub via batched MULTIEXP and summation
<%
let cursor = 1; // IC1..ICnPublic are used with val0..valN-1
let batchIndex = 0;
-%>
<% if (sizes.length === 1) { 
   const k = sizes[0]; -%>
    slice cpub = bls_g1_multiexp_<%= k %>(
<%   for (let i = 0; i < k; i++) { -%>
        verifier::IC<%= cursor + i %>, val<%= i %><%= i<k-1 ? "," : "" %>
<%   } -%>
        , <%= k %>
    );
<% } else { 

    let globalIdx = 0;
   sizes.forEach((k, bi) => { -%>
<%     if (bi === 0) { -%>
    slice cpub = bls_g1_multiexp_<%= k %>(
<%     } else { -%>
    cpub = bls_g1_add(cpub, bls_g1_multiexp_<%= k %>(
<%     } -%>
<%     for (let j = 0; j < k; j++) { -%>
        verifier::IC<%= cursor + globalIdx + j %>, val<%= globalIdx + j %><%= j<k-1 ? "," : "" %>
<%     } -%>
        , <%= k %>
    )<%= bi===0 ? ";" : ");" %>
<%     globalIdx += k; -%>
<%   }); -%>
<% } -%>

    ;; add the free term IC0
    cpub = bls_g1_add(cpub, verifier::IC0);
<% } -%>

    ;; pairing check
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub,              verifier::vk_gamma_2,
        pi_a_neg,          pi_b,
        pi_c,              verifier::vk_delta_2,
        verifier::vk_alpha_1, verifier::vk_beta_2,
        4
    );

    if (a == 0) {
        res = 0;
    } else {
        res = 1;
    }
    return (res);
}

(int) verify(
    slice in_msg_body
) impure {
    slice pi_a = in_msg_body~load_p1();
    slice pi_b = in_msg_body~load_p2();
    slice pi_c = in_msg_body~load_p1();
    var pubInputs = in_msg_body~load_dict();

    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInputs
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::verify) {
        int res = verify(in_msg_body);
        return ();
    }
    throw(0xffff);
}

int get_verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    slice pubInputs
) method_id {
    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInputs~load_dict()
    );
}
